-- ========================================
-- MIGRATION: Add Missing Features
-- Safe to run on existing database
-- Only creates new tables, no permission issues
-- ========================================

-- 1. Add reminders table (for automated notifications)
CREATE TABLE IF NOT EXISTS public.reminders (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  booking_id BIGINT REFERENCES public.bookings(id) ON DELETE CASCADE NOT NULL,
  remind_at TIMESTAMPTZ NOT NULL,
  sent BOOLEAN DEFAULT FALSE,
  notification_type TEXT CHECK (notification_type IN ('email', 'push', 'sms')),
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Enable RLS on reminders
ALTER TABLE public.reminders ENABLE ROW LEVEL SECURITY;

-- Policy: Users can view reminders for their bookings
CREATE POLICY "Users can view reminders for their bookings" ON public.reminders
  FOR SELECT USING (
    EXISTS (
      SELECT 1 FROM public.bookings
      WHERE id = booking_id
      AND (seeker_id = auth.uid() OR provider_id = auth.uid())
    )
  );

-- 2. Add endorsements table (skill validation)
CREATE TABLE IF NOT EXISTS public.endorsements (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  endorser_id UUID REFERENCES public.profiles(id) ON DELETE CASCADE NOT NULL,
  endorsee_id UUID REFERENCES public.profiles(id) ON DELETE CASCADE NOT NULL,
  skill TEXT NOT NULL,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  UNIQUE(endorser_id, endorsee_id, skill)
);

-- Enable RLS on endorsements
ALTER TABLE public.endorsements ENABLE ROW LEVEL SECURITY;

-- Policies for endorsements
CREATE POLICY "Endorsements are viewable by everyone" ON public.endorsements
  FOR SELECT USING (true);

CREATE POLICY "Users can create endorsements" ON public.endorsements
  FOR INSERT WITH CHECK (auth.uid() = endorser_id);

-- 3. Helper Functions

-- Function: Get user's average rating
CREATE OR REPLACE FUNCTION public.get_user_average_rating(user_uuid UUID)
RETURNS NUMERIC AS $$
DECLARE
  avg_rating NUMERIC;
BEGIN
  SELECT AVG(rating)::NUMERIC(3,2) INTO avg_rating
  FROM public.reviews
  WHERE reviewee_id = user_uuid;
  
  RETURN COALESCE(avg_rating, 0);
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Function: Get user's total review count
CREATE OR REPLACE FUNCTION public.get_user_review_count(user_uuid UUID)
RETURNS INTEGER AS $$
DECLARE
  review_count INTEGER;
BEGIN
  SELECT COUNT(*) INTO review_count
  FROM public.reviews
  WHERE reviewee_id = user_uuid;
  
  RETURN COALESCE(review_count, 0);
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Function: Check booking conflicts (for double-booking prevention)
CREATE OR REPLACE FUNCTION public.check_booking_conflicts(
  p_provider_id UUID,
  p_start_time TIMESTAMPTZ,
  p_end_time TIMESTAMPTZ,
  p_exclude_booking_id BIGINT DEFAULT NULL
)
RETURNS BOOLEAN AS $$
DECLARE
  conflict_exists BOOLEAN;
BEGIN
  SELECT EXISTS(
    SELECT 1 FROM public.bookings
    WHERE provider_id = p_provider_id
    AND status IN ('pending', 'confirmed')
    AND (id != p_exclude_booking_id OR p_exclude_booking_id IS NULL)
    AND (
      (start_time <= p_start_time AND end_time > p_start_time)
      OR (start_time < p_end_time AND end_time >= p_end_time)
      OR (start_time >= p_start_time AND end_time <= p_end_time)
    )
  ) INTO conflict_exists;
  
  RETURN conflict_exists;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- 4. Test queries to verify everything works

-- Test: Check if new tables were created successfully
SELECT 
  'profiles' AS table_name, 
  COUNT(*) AS row_count 
FROM public.profiles
UNION ALL
SELECT 'services', COUNT(*) FROM public.services
UNION ALL
SELECT 'bookings', COUNT(*) FROM public.bookings
UNION ALL
SELECT 'reviews', COUNT(*) FROM public.reviews
UNION ALL
SELECT 'messages', COUNT(*) FROM public.messages
UNION ALL
SELECT 'reminders', COUNT(*) FROM public.reminders
UNION ALL
SELECT 'endorsements', COUNT(*) FROM public.endorsements;

-- Success message
DO $$
BEGIN
  RAISE NOTICE '✅ Migration completed successfully!';
  RAISE NOTICE '✅ Reminders table added';
  RAISE NOTICE '✅ Endorsements table added';
  RAISE NOTICE '✅ Helper functions created';
  RAISE NOTICE '';
  RAISE NOTICE 'Your database is ready! All features are now available.';
END $$;
